nextflow_workflow {

    name "Test Workflow SAMPLETRACKING"
    script "workflows/sampletracking.nf"

    tag "workflows"
    tag "workflows/sampletracking"

    workflow "SAMPLETRACKING"

    test("Should run without failures") {
        options "-stub"
        setup {
            run("BWA_INDEX") {
                script "../../modules/nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] = [
                        [:],
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/seq/GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set_chr21.fna", checkIfExists: true)
                    ]
                    """

                }
            }
        }
        when {
            params {
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [id:"sample1", pool: "pool1", pool_count:2], // meta
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/bam/sample1.sort.bam", checkIfExists:true),     // sample_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/bam/sample1.sort.bam.bai", checkIfExists:true), // sample_index
                        [
                            file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/fastq/snp_sample1_R1.fastq.gz"),
                            file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/fastq/snp_sample1_R2.fastq.gz"),
                        ],      // snp_fastq
                        [],     // snp_bam
                        []      // snp_bai
                    ],
                    [
                        [id:"sample2", pool: "pool1", pool_count:2], // meta
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/cram/sample2.sorted.cram", checkIfExists:true),        // sample_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/cram/sample2.sorted.cram.crai", checkIfExists:true),   // sample_index
                        [],      // snp_fastq
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/cram/snp_sample2.sorted.cram"),           // snp_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/cram/snp_sample2.sorted.cram.crai"),     // snp_bam
                    ],
                )
                input[1] = BWA_INDEX.out.index
                input[2] = Channel.value(
                    [
                        [:],
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/seq/GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set_chr21.fna"),
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/seq/GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set_chr21.fna.fai")
                    ]
                )
                input[3] = Channel.value(
                    [
                        [:],
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/picard/haplotype_map.txt")
                    ]
                )
                input[4] = params.outdir
                input[5] = ""
                input[6] = ""
                input[7] = ""
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Should run without failures - skip crosscheck fingerprints") {
        options "-stub"

        when {
            params {
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [id:"sample1", pool: "pool1", pool_count:2], // meta
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/bam/sample1.sort.bam", checkIfExists:true),     // sample_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/bam/sample1.sort.bam.bai", checkIfExists:true), // sample_index
                        [],     // snp_fastq
                        [],     // snp_bam
                        []      // snp_bai
                    ],
                    [
                        [id:"sample2", pool: "pool1", pool_count:2], // meta
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/cram/sample2.sorted.cram", checkIfExists:true),        // sample_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/exome/cram/sample2.sorted.cram.crai", checkIfExists:true),   // sample_index
                        [],      // snp_fastq
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/cram/snp_sample2.sorted.cram"),           // snp_bam
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/illumina/snp/cram/snp_sample2.sorted.cram.crai"),     // snp_bam
                    ],
                )
                input[1] = []
                input[2] = Channel.value(
                    [
                        [:],
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/seq/GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set_chr21.fna"),
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/seq/GCA_000001405.15_GRCh38_full_plus_hs38d1_analysis_set_chr21.fna.fai")
                    ]
                )
                input[3] = Channel.value(
                    [
                        [:],
                        file("https://github.com/nf-cmgg/test-datasets/raw/sampletracking/data/genomics/homo_sapiens/genome/picard/haplotype_map.txt")
                    ]
                )
                input[4] = params.outdir
                input[5] = ""
                input[6] = ""
                input[7] = ""
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }
}
